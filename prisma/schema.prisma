generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
   engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id
  name            String
  email           String            @unique
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  role            String?
  acceptenceState String?           @default("idle")
  cvKey           String?
  bio             String?
  phone           Int?
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  noStudents      Int               @default(0)
  trainingHours   Int               @default(0)
  level           String            @default("LEVEL_1")
  region          String            @default("none")
  Account         Account[]
  Session         Session[]
  UserCertificate UserCertificate[]

  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  createdAt      DateTime
  token          String   @unique
  updatedAt      DateTime
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  password              String?
  accessTokenExpiresAt  DateTime?
  createdAt             DateTime
  refreshTokenExpiresAt DateTime?
  scope                 String?
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Material {
  id         String   @id @default(cuid())
  storageKey String
  title      String
  categoryId String
  published  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("material")
}

model Program {
  id          String   @id @default(cuid())
  link        String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?

  @@map("program")
}

model Category {
  id        String     @id @default(cuid())
  title     String     @unique
  icon      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Material  Material[]

  @@map("category")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String?
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("article")
}

model Statistics {
  id              String   @id @default("stats")
  registeredUsers Int      @default(0)
  trainingHours   Int      @default(0)
  updatedAt       DateTime @updatedAt
  curriculums     Int      @default(0)

  @@map("statistics")
}

model UserCertificate {
  id             String @id @default(cuid())
  userId         String
  certificateKey String
  contentType    String
  size           Int
  name           String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userCertificate")
}
